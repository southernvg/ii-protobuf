// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stackfinder.proto

package stackfinder_service

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type HealthRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthRequest) Reset()         { *m = HealthRequest{} }
func (m *HealthRequest) String() string { return proto.CompactTextString(m) }
func (*HealthRequest) ProtoMessage()    {}
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b833ff3c53c1a5e, []int{0}
}

func (m *HealthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthRequest.Unmarshal(m, b)
}
func (m *HealthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthRequest.Marshal(b, m, deterministic)
}
func (m *HealthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthRequest.Merge(m, src)
}
func (m *HealthRequest) XXX_Size() int {
	return xxx_messageInfo_HealthRequest.Size(m)
}
func (m *HealthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthRequest proto.InternalMessageInfo

type Category struct {
	Id                   int32    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Category) Reset()         { *m = Category{} }
func (m *Category) String() string { return proto.CompactTextString(m) }
func (*Category) ProtoMessage()    {}
func (*Category) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b833ff3c53c1a5e, []int{1}
}

func (m *Category) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Category.Unmarshal(m, b)
}
func (m *Category) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Category.Marshal(b, m, deterministic)
}
func (m *Category) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Category.Merge(m, src)
}
func (m *Category) XXX_Size() int {
	return xxx_messageInfo_Category.Size(m)
}
func (m *Category) XXX_DiscardUnknown() {
	xxx_messageInfo_Category.DiscardUnknown(m)
}

var xxx_messageInfo_Category proto.InternalMessageInfo

func (m *Category) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Category) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type HealthResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=Version,proto3" json:"Version,omitempty"`
	ChromeProcesses      int32    `protobuf:"varint,3,opt,name=ChromeProcesses,proto3" json:"ChromeProcesses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthResponse) Reset()         { *m = HealthResponse{} }
func (m *HealthResponse) String() string { return proto.CompactTextString(m) }
func (*HealthResponse) ProtoMessage()    {}
func (*HealthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b833ff3c53c1a5e, []int{2}
}

func (m *HealthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthResponse.Unmarshal(m, b)
}
func (m *HealthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthResponse.Marshal(b, m, deterministic)
}
func (m *HealthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthResponse.Merge(m, src)
}
func (m *HealthResponse) XXX_Size() int {
	return xxx_messageInfo_HealthResponse.Size(m)
}
func (m *HealthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthResponse proto.InternalMessageInfo

func (m *HealthResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *HealthResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *HealthResponse) GetChromeProcesses() int32 {
	if m != nil {
		return m.ChromeProcesses
	}
	return 0
}

type StackFinderPageRequest struct {
	Url                  string   `protobuf:"bytes,1,opt,name=Url,proto3" json:"Url,omitempty"`
	IncludeUnknown       bool     `protobuf:"varint,2,opt,name=IncludeUnknown,proto3" json:"IncludeUnknown,omitempty"`
	ScreenShot           bool     `protobuf:"varint,3,opt,name=ScreenShot,proto3" json:"ScreenShot,omitempty"`
	HeaderBidInfo        bool     `protobuf:"varint,4,opt,name=HeaderBidInfo,proto3" json:"HeaderBidInfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StackFinderPageRequest) Reset()         { *m = StackFinderPageRequest{} }
func (m *StackFinderPageRequest) String() string { return proto.CompactTextString(m) }
func (*StackFinderPageRequest) ProtoMessage()    {}
func (*StackFinderPageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b833ff3c53c1a5e, []int{3}
}

func (m *StackFinderPageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StackFinderPageRequest.Unmarshal(m, b)
}
func (m *StackFinderPageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StackFinderPageRequest.Marshal(b, m, deterministic)
}
func (m *StackFinderPageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StackFinderPageRequest.Merge(m, src)
}
func (m *StackFinderPageRequest) XXX_Size() int {
	return xxx_messageInfo_StackFinderPageRequest.Size(m)
}
func (m *StackFinderPageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StackFinderPageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StackFinderPageRequest proto.InternalMessageInfo

func (m *StackFinderPageRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *StackFinderPageRequest) GetIncludeUnknown() bool {
	if m != nil {
		return m.IncludeUnknown
	}
	return false
}

func (m *StackFinderPageRequest) GetScreenShot() bool {
	if m != nil {
		return m.ScreenShot
	}
	return false
}

func (m *StackFinderPageRequest) GetHeaderBidInfo() bool {
	if m != nil {
		return m.HeaderBidInfo
	}
	return false
}

type StackFinderHTMLRequest struct {
	HTML                 string   `protobuf:"bytes,1,opt,name=HTML,proto3" json:"HTML,omitempty"`
	Width                int64    `protobuf:"varint,2,opt,name=Width,proto3" json:"Width,omitempty"`
	Height               int64    `protobuf:"varint,3,opt,name=Height,proto3" json:"Height,omitempty"`
	IncludeUnknown       bool     `protobuf:"varint,4,opt,name=IncludeUnknown,proto3" json:"IncludeUnknown,omitempty"`
	ScreenShot           bool     `protobuf:"varint,5,opt,name=ScreenShot,proto3" json:"ScreenShot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StackFinderHTMLRequest) Reset()         { *m = StackFinderHTMLRequest{} }
func (m *StackFinderHTMLRequest) String() string { return proto.CompactTextString(m) }
func (*StackFinderHTMLRequest) ProtoMessage()    {}
func (*StackFinderHTMLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b833ff3c53c1a5e, []int{4}
}

func (m *StackFinderHTMLRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StackFinderHTMLRequest.Unmarshal(m, b)
}
func (m *StackFinderHTMLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StackFinderHTMLRequest.Marshal(b, m, deterministic)
}
func (m *StackFinderHTMLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StackFinderHTMLRequest.Merge(m, src)
}
func (m *StackFinderHTMLRequest) XXX_Size() int {
	return xxx_messageInfo_StackFinderHTMLRequest.Size(m)
}
func (m *StackFinderHTMLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StackFinderHTMLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StackFinderHTMLRequest proto.InternalMessageInfo

func (m *StackFinderHTMLRequest) GetHTML() string {
	if m != nil {
		return m.HTML
	}
	return ""
}

func (m *StackFinderHTMLRequest) GetWidth() int64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *StackFinderHTMLRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *StackFinderHTMLRequest) GetIncludeUnknown() bool {
	if m != nil {
		return m.IncludeUnknown
	}
	return false
}

func (m *StackFinderHTMLRequest) GetScreenShot() bool {
	if m != nil {
		return m.ScreenShot
	}
	return false
}

type StackFinderResponse struct {
	Count                int32                       `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	Items                []*StackFinderResponse_Item `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	BidResponses         []byte                      `protobuf:"bytes,3,opt,name=BidResponses,proto3" json:"BidResponses,omitempty"`
	WinBids              []byte                      `protobuf:"bytes,4,opt,name=WinBids,proto3" json:"WinBids,omitempty"`
	Screenshot           []byte                      `protobuf:"bytes,5,opt,name=Screenshot,proto3" json:"Screenshot,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *StackFinderResponse) Reset()         { *m = StackFinderResponse{} }
func (m *StackFinderResponse) String() string { return proto.CompactTextString(m) }
func (*StackFinderResponse) ProtoMessage()    {}
func (*StackFinderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b833ff3c53c1a5e, []int{5}
}

func (m *StackFinderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StackFinderResponse.Unmarshal(m, b)
}
func (m *StackFinderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StackFinderResponse.Marshal(b, m, deterministic)
}
func (m *StackFinderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StackFinderResponse.Merge(m, src)
}
func (m *StackFinderResponse) XXX_Size() int {
	return xxx_messageInfo_StackFinderResponse.Size(m)
}
func (m *StackFinderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StackFinderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StackFinderResponse proto.InternalMessageInfo

func (m *StackFinderResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *StackFinderResponse) GetItems() []*StackFinderResponse_Item {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *StackFinderResponse) GetBidResponses() []byte {
	if m != nil {
		return m.BidResponses
	}
	return nil
}

func (m *StackFinderResponse) GetWinBids() []byte {
	if m != nil {
		return m.WinBids
	}
	return nil
}

func (m *StackFinderResponse) GetScreenshot() []byte {
	if m != nil {
		return m.Screenshot
	}
	return nil
}

type StackFinderResponse_Item struct {
	ItemId               int32       `protobuf:"varint,1,opt,name=ItemId,proto3" json:"ItemId,omitempty"`
	ItemName             string      `protobuf:"bytes,2,opt,name=ItemName,proto3" json:"ItemName,omitempty"`
	Url                  string      `protobuf:"bytes,3,opt,name=Url,proto3" json:"Url,omitempty"`
	ItemCategory         []*Category `protobuf:"bytes,4,rep,name=ItemCategory,proto3" json:"ItemCategory,omitempty"`
	InitiatorItemId      int32       `protobuf:"varint,5,opt,name=InitiatorItemId,proto3" json:"InitiatorItemId,omitempty"`
	InitiatorItemName    string      `protobuf:"bytes,6,opt,name=InitiatorItemName,proto3" json:"InitiatorItemName,omitempty"`
	InitiatorCategory    []*Category `protobuf:"bytes,7,rep,name=InitiatorCategory,proto3" json:"InitiatorCategory,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *StackFinderResponse_Item) Reset()         { *m = StackFinderResponse_Item{} }
func (m *StackFinderResponse_Item) String() string { return proto.CompactTextString(m) }
func (*StackFinderResponse_Item) ProtoMessage()    {}
func (*StackFinderResponse_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b833ff3c53c1a5e, []int{5, 0}
}

func (m *StackFinderResponse_Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StackFinderResponse_Item.Unmarshal(m, b)
}
func (m *StackFinderResponse_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StackFinderResponse_Item.Marshal(b, m, deterministic)
}
func (m *StackFinderResponse_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StackFinderResponse_Item.Merge(m, src)
}
func (m *StackFinderResponse_Item) XXX_Size() int {
	return xxx_messageInfo_StackFinderResponse_Item.Size(m)
}
func (m *StackFinderResponse_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_StackFinderResponse_Item.DiscardUnknown(m)
}

var xxx_messageInfo_StackFinderResponse_Item proto.InternalMessageInfo

func (m *StackFinderResponse_Item) GetItemId() int32 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

func (m *StackFinderResponse_Item) GetItemName() string {
	if m != nil {
		return m.ItemName
	}
	return ""
}

func (m *StackFinderResponse_Item) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *StackFinderResponse_Item) GetItemCategory() []*Category {
	if m != nil {
		return m.ItemCategory
	}
	return nil
}

func (m *StackFinderResponse_Item) GetInitiatorItemId() int32 {
	if m != nil {
		return m.InitiatorItemId
	}
	return 0
}

func (m *StackFinderResponse_Item) GetInitiatorItemName() string {
	if m != nil {
		return m.InitiatorItemName
	}
	return ""
}

func (m *StackFinderResponse_Item) GetInitiatorCategory() []*Category {
	if m != nil {
		return m.InitiatorCategory
	}
	return nil
}

func init() {
	proto.RegisterType((*HealthRequest)(nil), "stackfinder_service.HealthRequest")
	proto.RegisterType((*Category)(nil), "stackfinder_service.Category")
	proto.RegisterType((*HealthResponse)(nil), "stackfinder_service.HealthResponse")
	proto.RegisterType((*StackFinderPageRequest)(nil), "stackfinder_service.StackFinderPageRequest")
	proto.RegisterType((*StackFinderHTMLRequest)(nil), "stackfinder_service.StackFinderHTMLRequest")
	proto.RegisterType((*StackFinderResponse)(nil), "stackfinder_service.StackFinderResponse")
	proto.RegisterType((*StackFinderResponse_Item)(nil), "stackfinder_service.StackFinderResponse.Item")
}

func init() { proto.RegisterFile("stackfinder.proto", fileDescriptor_3b833ff3c53c1a5e) }

var fileDescriptor_3b833ff3c53c1a5e = []byte{
	// 545 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x6e, 0xd3, 0x30,
	0x18, 0x55, 0xf3, 0xd3, 0x75, 0x1f, 0xa5, 0x65, 0xde, 0x34, 0x45, 0x95, 0x40, 0x55, 0x40, 0xa8,
	0x12, 0xd0, 0x8b, 0xf1, 0x04, 0xb4, 0xd2, 0xd4, 0x88, 0x1f, 0x0d, 0x97, 0xb1, 0x4b, 0x14, 0x9a,
	0x6f, 0x8d, 0xb5, 0xd6, 0x1e, 0xb6, 0x0b, 0xe2, 0x01, 0x78, 0x07, 0xae, 0xb9, 0xe5, 0x96, 0x07,
	0x44, 0x76, 0x92, 0x2e, 0xc9, 0xa2, 0xad, 0x57, 0xf1, 0x39, 0xfe, 0xf9, 0xce, 0xb1, 0xcf, 0x17,
	0x38, 0x50, 0x3a, 0x5e, 0x5c, 0x5d, 0x32, 0x9e, 0xa0, 0x1c, 0x5f, 0x4b, 0xa1, 0x05, 0x39, 0x2c,
	0x51, 0x5f, 0x14, 0xca, 0xef, 0x6c, 0x81, 0x61, 0x1f, 0x1e, 0xce, 0x30, 0x5e, 0xe9, 0x94, 0xe2,
	0xb7, 0x0d, 0x2a, 0x1d, 0x8e, 0xa1, 0x33, 0x8d, 0x35, 0x2e, 0x85, 0xfc, 0x49, 0x7a, 0xe0, 0x44,
	0x49, 0xd0, 0x1a, 0xb6, 0x46, 0x3e, 0x75, 0xa2, 0x84, 0x10, 0xf0, 0x3e, 0xc4, 0x6b, 0x0c, 0x9c,
	0x61, 0x6b, 0xb4, 0x4f, 0xed, 0x38, 0x5c, 0x41, 0xaf, 0x38, 0x40, 0x5d, 0x0b, 0xae, 0x90, 0x1c,
	0x43, 0x7b, 0xae, 0x63, 0xbd, 0x51, 0x76, 0xe7, 0x3e, 0xcd, 0x11, 0x09, 0x60, 0xef, 0x33, 0x4a,
	0xc5, 0x04, 0xcf, 0x0f, 0x28, 0x20, 0x19, 0x41, 0x7f, 0x9a, 0x4a, 0xb1, 0xc6, 0x33, 0x29, 0x16,
	0xa8, 0x14, 0xaa, 0xc0, 0xb5, 0x45, 0xeb, 0x74, 0xf8, 0xbb, 0x05, 0xc7, 0x73, 0x63, 0xe3, 0xd4,
	0xda, 0x38, 0x8b, 0x97, 0x98, 0x0b, 0x27, 0x8f, 0xc0, 0x3d, 0x97, 0xab, 0xbc, 0xa6, 0x19, 0x92,
	0xe7, 0xd0, 0x8b, 0xf8, 0x62, 0xb5, 0x49, 0xf0, 0x9c, 0x5f, 0x71, 0xf1, 0x23, 0xab, 0xdb, 0xa1,
	0x35, 0x96, 0x3c, 0x01, 0x98, 0x2f, 0x24, 0x22, 0x9f, 0xa7, 0x42, 0xdb, 0xca, 0x1d, 0x5a, 0x62,
	0xc8, 0x33, 0x7b, 0x47, 0x09, 0xca, 0x09, 0x4b, 0x22, 0x7e, 0x29, 0x02, 0xcf, 0x2e, 0xa9, 0x92,
	0xe1, 0x9f, 0xaa, 0xb4, 0xd9, 0xa7, 0xf7, 0xef, 0x0a, 0x69, 0x04, 0x3c, 0x03, 0x73, 0x6d, 0x76,
	0x4c, 0x8e, 0xc0, 0xbf, 0x60, 0x89, 0x4e, 0xad, 0x26, 0x97, 0x66, 0xc0, 0xdc, 0xdd, 0x0c, 0xd9,
	0x32, 0xcd, 0x64, 0xb8, 0x34, 0x47, 0x0d, 0x56, 0xbc, 0x1d, 0xac, 0xf8, 0x75, 0x2b, 0xe1, 0x2f,
	0x0f, 0x0e, 0x4b, 0x22, 0xb7, 0x6f, 0x76, 0x04, 0xfe, 0x54, 0x6c, 0xb8, 0xce, 0x1f, 0x3b, 0x03,
	0x64, 0x0a, 0x3e, 0xd3, 0xb8, 0x56, 0x81, 0x33, 0x74, 0x47, 0x0f, 0x4e, 0x5e, 0x8d, 0x1b, 0x12,
	0x34, 0x6e, 0x38, 0x6e, 0x1c, 0x69, 0x5c, 0xd3, 0x6c, 0x2f, 0x09, 0xa1, 0x3b, 0x61, 0x49, 0x31,
	0x95, 0xbd, 0x6c, 0x97, 0x56, 0x38, 0x13, 0x8d, 0x0b, 0xc6, 0x27, 0x2c, 0x51, 0xd6, 0x57, 0x97,
	0x16, 0xf0, 0xc6, 0x90, 0x2a, 0x0c, 0x75, 0x69, 0x89, 0x19, 0xfc, 0x73, 0xc0, 0x33, 0xd5, 0xcc,
	0xcd, 0x99, 0xef, 0x36, 0xaf, 0x39, 0x22, 0x03, 0xe8, 0x98, 0x51, 0x29, 0xb7, 0x5b, 0x5c, 0x44,
	0xc6, 0xbd, 0x89, 0xcc, 0x1b, 0xe8, 0x9a, 0xd9, 0xa2, 0x03, 0x02, 0xcf, 0x1a, 0x7f, 0xdc, 0x68,
	0xbc, 0x58, 0x44, 0x2b, 0x5b, 0x4c, 0x98, 0x23, 0xce, 0x34, 0x8b, 0xb5, 0x90, 0xb9, 0x22, 0x3f,
	0x0b, 0x73, 0x8d, 0x26, 0x2f, 0xe1, 0xa0, 0x42, 0x59, 0x8d, 0x6d, 0x2b, 0xe6, 0xf6, 0x04, 0x79,
	0x5b, 0x5a, 0xbd, 0xd5, 0xb7, 0xb7, 0x8b, 0xbe, 0xdb, 0xfb, 0x4e, 0xfe, 0x3a, 0xe0, 0xcc, 0x4f,
	0xc9, 0x47, 0x13, 0x37, 0xd3, 0xbc, 0x24, 0x6c, 0x3c, 0xa2, 0xf2, 0x6b, 0x18, 0x3c, 0xbd, 0x73,
	0x4d, 0x9e, 0xa4, 0x14, 0xfa, 0xb5, 0x06, 0x25, 0x2f, 0xee, 0xcb, 0x4d, 0xa9, 0x8d, 0x07, 0xa3,
	0x5d, 0x43, 0x56, 0xab, 0x64, 0x9b, 0xea, 0xde, 0x4a, 0xa5, 0xae, 0xdc, 0xbd, 0xd2, 0xd7, 0xb6,
	0xfd, 0x81, 0xbe, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x12, 0xae, 0x0a, 0xcc, 0x55, 0x05, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SFClient is the client API for SF service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SFClient interface {
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	StackFinderPage(ctx context.Context, in *StackFinderPageRequest, opts ...grpc.CallOption) (*StackFinderResponse, error)
	StackFinderHTML(ctx context.Context, in *StackFinderHTMLRequest, opts ...grpc.CallOption) (*StackFinderResponse, error)
}

type sFClient struct {
	cc *grpc.ClientConn
}

func NewSFClient(cc *grpc.ClientConn) SFClient {
	return &sFClient{cc}
}

func (c *sFClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/stackfinder_service.SF/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sFClient) StackFinderPage(ctx context.Context, in *StackFinderPageRequest, opts ...grpc.CallOption) (*StackFinderResponse, error) {
	out := new(StackFinderResponse)
	err := c.cc.Invoke(ctx, "/stackfinder_service.SF/StackFinderPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sFClient) StackFinderHTML(ctx context.Context, in *StackFinderHTMLRequest, opts ...grpc.CallOption) (*StackFinderResponse, error) {
	out := new(StackFinderResponse)
	err := c.cc.Invoke(ctx, "/stackfinder_service.SF/StackFinderHTML", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SFServer is the server API for SF service.
type SFServer interface {
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	StackFinderPage(context.Context, *StackFinderPageRequest) (*StackFinderResponse, error)
	StackFinderHTML(context.Context, *StackFinderHTMLRequest) (*StackFinderResponse, error)
}

func RegisterSFServer(s *grpc.Server, srv SFServer) {
	s.RegisterService(&_SF_serviceDesc, srv)
}

func _SF_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SFServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stackfinder_service.SF/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SFServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SF_StackFinderPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackFinderPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SFServer).StackFinderPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stackfinder_service.SF/StackFinderPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SFServer).StackFinderPage(ctx, req.(*StackFinderPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SF_StackFinderHTML_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackFinderHTMLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SFServer).StackFinderHTML(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stackfinder_service.SF/StackFinderHTML",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SFServer).StackFinderHTML(ctx, req.(*StackFinderHTMLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SF_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stackfinder_service.SF",
	HandlerType: (*SFServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _SF_Health_Handler,
		},
		{
			MethodName: "StackFinderPage",
			Handler:    _SF_StackFinderPage_Handler,
		},
		{
			MethodName: "StackFinderHTML",
			Handler:    _SF_StackFinderHTML_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stackfinder.proto",
}
